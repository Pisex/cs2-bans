# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python: 
import os

# Here only one sdk should be available to generate only one executable in the end,
# as multi-sdk loading isn't supported out of the box by metamod, and would require specifying the full path in the vdf
# which in the end would ruin the multi-platform (unix, win etc) loading by metamod as it won't be able to append platform specific extension
# so just fall back to the single binary.
# Multi-sdk solutions should be manually loaded with a custom plugin loader (examples being sourcemod, stripper:source)
for sdk_target in MMSPlugin.sdk_targets:
    sdk = sdk_target.sdk
    cxx = sdk_target.cxx

    binary = MMSPlugin.HL2Library(builder, cxx, MMSPlugin.plugin_name, sdk)

    binary.compiler.cxxincludes += [
      os.path.join(builder.currentSourcePath, 'funchook', 'include'),
      os.path.join(builder.sourcePath, 'include'),
    ]

    if binary.compiler.target.platform == 'linux':
      binary.compiler.postlink += [
        os.path.join(builder.sourcePath, 'funchook', 'lib', 'libfunchook.a'),
        os.path.join(builder.sourcePath, 'funchook', 'lib', 'libdistorm.a'),
      ]
    elif binary.compiler.target.platform == 'windows':
      binary.compiler.postlink += [
        os.path.join('psapi.lib'),
        os.path.join(builder.sourcePath, 'funchook', 'lib', 'funchook.lib'),
        os.path.join(builder.sourcePath, 'funchook', 'lib', 'distorm.lib'),
      ]

    binary.custom = [builder.tools.Protoc(protoc = sdk_target.protoc, sources = [
      os.path.join(sdk['path'], 'common', 'network_connection.proto')
    ])]

    binary.sources += [
      'admin_system.cpp',
      os.path.join('sdk', 'ctimer.cpp'),
      os.path.join('sdk', 'schemasystem.cpp'),
      os.path.join('sdk', 'module.cpp'),
      os.path.join('sdk', 'memaddr.cpp')
    ]

    if cxx.target.arch == 'x86':
      binary.sources += ['sourcehook/sourcehook_hookmangen.cpp']
    nodes = builder.Add(binary)
    MMSPlugin.binaries += [nodes]